<?php

namespace App\Http\Controllers\Users;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use App\Models\Package;
use App\Models\UserPackage;
use App\Models\User;
use Illuminate\Support\Facades\Http;

class UserDashboardPackagesController extends Controller
{
    public function index()
    {
        // Fetch the current active package of the authenticated user
        $user = auth()->user();
        $currentPackage = $user->activePackage();
        $packages = Package::all();
        
        return view('users.UserDashboardPackages', [
            'packages' => $packages,
            'currentPackage' => $currentPackage
        ]);
    }

    public function purchase(Request $request)
    {
        $package = Package::where('name', $request->package_name)->firstOrFail();

        $user = auth()->user();

        // Create a new UserPackage entry
        $userPackage = UserPackage::create([
            'user_id' => $user->id,
            'package_id' => $package->id,
            'amount' => $package->amount,
            'searches_left' => 0, // Initially, no searches are added until payment is confirmed
            'payment_status' => 'pending',
        ]);
        
        $paymentDetails = [
            'email' => $user->email,
            'amount' => $package->amount * 100, // Paystack expects amount in kobo
            'callback_url' => route('payment.callback'),
            'metadata' => [
                'order_id' => $userPackage->id,
                'user_id' => $user->id,
            ],
        ];

        $response = Http::withToken(env('PAYSTACK_SECRET_KEY'))
            ->post(env('PAYSTACK_PAYMENT_URL') . '/transaction/initialize', $paymentDetails);

        if ($response->successful()) {
            $paymentUrl = $response['data']['authorization_url'];
            return redirect($paymentUrl);
        } else {
            return redirect()->route('packages.index')->with('error', 'Failed to initiate payment.');
        }
    }
    

    public function handleGatewayCallback(Request $request)
    {
        $paymentReference = $request->query('reference');

        $response = Http::withToken(env('PAYSTACK_SECRET_KEY'))
            ->get(env('PAYSTACK_PAYMENT_URL') . '/transaction/verify/' . $paymentReference);

        if ($response->successful() && $response['data']['status'] == 'success') {
            $userPackage = UserPackage::findOrFail($response['data']['metadata']['order_id']);
            $userPackage->payment_status = 'paid';

            // Find the active package for the user
            $user = $userPackage->user;
            $activePackage = $user->activePackage();

            if ($activePackage) {
                // If there is an active package, increment the searches_left
                $activePackage->increment('searches_left', $userPackage->package->search_limit);
                $activePackage->save();
            } else {
                // If there is no active package, set searches_left directly
                $userPackage->searches_left = $userPackage->package->search_limit;
                $userPackage->save();
            }

            return redirect()->route('packages.index')->with('status', 'Payment successful!');
        } else {
            return redirect()->route('packages.index')->with('error', 'Payment verification failed.');
        }
    }
}












<?php

namespace App\Http\Controllers\Users\Dashboard;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use App\Models\Paper;
use Illuminate\Support\Str;
use App\Models\Institution;
use App\Models\Certificate;
use App\Models\SearchLog;
use App\Models\Package;
use App\Models\User;
use Illuminate\Support\Facades\Auth;
use App\Models\UserPackage;
use ConsoleTVs\Charts\Classes\Chartjs\Chart;
use Chartisan\PHP\Chartisan;
use Illuminate\Support\Facades\Http;


class UserDashboardController extends Controller
{
    // public function getTitle(Request $request)
    // {
    //        // Determine the route name of the current request
    //        $route = $request->route()->getName();
    //         // Get the page title based on the route
    //      $pageTitle = $this->getTitle($route);
    //     // Convert route name to human-readable title
    //     $allpageTitle = Str::title(str_replace('.', ' ',  $pageTitle));
    //     // You can further customize the title if needed based on the route
    //     // return $title;
    //     return view( [
    //         'allpageTitle' => $allpageTitle,]);
    // }
    

    public function index()
    {
        $user = auth()->user();
        $institution = $user->my_institution;
        $institutions = Institution::all(); 
    
        // Count the number of papers uploaded by the authenticated user
        $papersCount = Paper::where('user_id', $user->id)->count();
    
        // Count the number of searches performed by the authenticated user
        $searchCount = SearchLog::where('user_id', $user->id)->count();
    
        // Fetch the latest 5 search logs by the authenticated user
        $userId = Auth::id();
        $searchLogs = SearchLog::where('user_id', $userId)
            ->orderBy('created_at', 'desc') // Order by creation date, most recent first
            ->take(5) // Limit to 5 logs
            ->get();
    
        // Initialize an empty collection to store certificates
        $certificates = collect();
        $qualificationTypes = [];
    
        // Loop through each search log and fetch related certificates
        foreach ($searchLogs as $log) {
            $certificate = Certificate::where('certificate_number', $log->search_term)
                ->with('institution')
                ->first();
            
            if ($certificate) {
                $certificates->push($certificate);
                $qualificationTypes[] = $certificate->qualification_type;
            }
        }
    
        // Count occurrences of each qualification type
        $qualificationTypeCounts = array_count_values($qualificationTypes);
    
        // Count the number of searches related to the user's institution
         // Count the number of searches related to the user's institution
    // $institutionSearchCount = SearchLog::whereHas('certificate', function ($query) use ($institution) {
    //     $query->where('institution_id', $institution->id);
    // })->where('user_id', $userId)->count();

    // Initialize institutionSearchCount
    
    $institutionSearchCount = 0;
    $maleCount = 0;
    $femaleCount = 0;
    $institutionCertificateCount = 0;

    if ($institution) {
        // Get all certificate numbers associated with this institution
        $certificateNumbers = Certificate::where('institution_id', $institution->id)
            ->pluck('certificate_number')
            ->toArray();

        // Fetch search logs that match the certificate numbers
        $searchLogs = SearchLog::whereIn('search_term', $certificateNumbers)
            ->whereHas('certificate', function ($query) use ($institution) {
                $query->where('institution_id', $institution->id);
            })
            ->with('certificate')
            ->get();

        // Count the number of searches related to the institution's certificates
        $institutionSearchCount = $searchLogs->count();

        // Count males and females from the search logs
        foreach ($searchLogs as $log) {
            if ($log->certificate && $log->certificate->gender) {
                if ($log->certificate->gender === 'Male') {
                    $maleCount++;
                } elseif ($log->certificate->gender === 'Female') {
                    $femaleCount++;
                }
            }
        }

        // Count the number of unique certificates under this institution
        $institutionCertificateCount = Certificate::where('institution_id', $institution->id)->count();
    } else {
        $institutionCertificateCount = 0;
    }
  
        // Prepare data for the chart
        $chart = new Chart;
        $chart->labels(array_keys($qualificationTypeCounts));
        $chart->dataset('Qualification Types', 'pie', array_values($qualificationTypeCounts))
            ->options([
                'backgroundColor' => [
                    'rgba(255, 99, 132, 1)',
                    'rgba(54, 162, 235, 1)',
                    'rgba(255, 206, 86, 1)',
                    'rgba(75, 192, 192, 1)',
                    'rgba(153, 102, 255, 1)',
                    'rgba(255, 159, 64, 1)',
                    'rgba(243, 229, 0, 1)'  // Added this to match your comment
                ],
                'borderColor' => [
                    'rgba(255, 99, 132, 1)',
                    'rgba(54, 162, 235, 1)',
                    'rgba(255, 206, 86, 1)',
                    'rgba(75, 192, 192, 1)',
                    'rgba(153, 102, 255, 1)',
                    'rgba(255, 159, 64, 1)'
                ],
                'borderWidth' => 1,
                'plugins' => [
                    'datalabels' => [
                        'formatter' => function ($value) use ($qualificationTypeCounts) {
                            $total = array_sum($qualificationTypeCounts);
                            $percentage = ($value / $total) * 100;
                            return number_format($percentage, 1) . '%';
                        },
                        'color' => '#fff',
                    ]
                ],
                'scales' => [
                    'x' => [
                        'display' => false
                    ],
                    'y' => [
                        'display' => false
                    ]
                ]
            ]);
    
        return view('users.UserDashboard', [
            'institution' => $institution,
            'institutions' => $institutions, 
            'papersCount' => $papersCount, 
            'searchCount' => $searchCount,
            'certificates' => $certificates,
            'chart' => $chart,
            'qualificationTypeCounts' => $qualificationTypeCounts,
            'institutionSearchCount' => $institutionSearchCount,
            'institutionCertificateCount' => $institutionCertificateCount,
            'maleCount' => $maleCount,
            'femaleCount' => $femaleCount,

        ]);   
    }
    


public function profile()
{
    // Fetch the current user's institution information
    $data = auth()->user()->my_institution  ?? auth()->user()->employer ;
 

    return view('users.UserDashboardProfile', compact('data'));
}


public function papers()
{
    // // Fetch the currently authenticated user
    // $user = auth()->user();

    // // Fetch papers posted by the currently authenticated user
    // $papers = Paper::where('user_id', $user->id)->get() ;

    // Pass the papers data to the view
    // return view('users.UserDashboardPapers', ['papers' => $papers]);

    $user = auth()->user();
    $papers = $user->papers()->orderBy('created_at', 'desc')->take(10)->get();
    
    $allpapers = Paper::orderBy('created_at', 'desc')->take(20)->get();

    return view('users.UserDashboardPapers', ['papers' => $papers,'allpapers' => $allpapers]);
}


public function UploadCertificate()
{
    return view('users.UserDashboardUploadCertificate');
}


public function SearchCertificate()
{
    $institutions = Institution::all();

    return view('users.UserDashboardSearchCertificate', [ 'institution'=> $institutions]);
}


public function packages()
{

    $userId = auth()->id();
    $user = User::find($userId); 
    $activePackage = $user->activePackage();

    $packages = Package::all();    
    return view('users.UserDashboardPackages', [
        'packages' => $packages,
        'activePackage' => $activePackage
        
    ]);
}



// public function verified()
// {
//         $userId = Auth::id();

//         // Fetch all search logs by the authenticated user
//         $searchLogs = SearchLog::where('user_id', $userId)->get();

//         // Initialize an empty collection to store certificates
//         $certificates = collect();

//         // Loop through each search log and fetch related certificates
//         foreach ($searchLogs as $log) {
//             $certificate = Certificate::where('certificate_number', $log->search_term)
//                 ->with('institution')
//                 ->first();
            
//             if ($certificate) {
//                 $certificates->push($certificate);
//             }
//         }

//     return view('Users.UserDashboardVerified', ['certificates' => $certificates]);
// }
public function verified()
{
    $userId = Auth::id();

    // Fetch all search logs by the authenticated user
    $searchLogs = SearchLog::where('user_id', $userId)->get();

    // Initialize an empty collection to store certificates
    $certificates = collect();

     // Count the number of searches performed by the authenticated user
     $searchCount = SearchLog::where('user_id', $userId)->count();

    // Initialize counters for male and female certificates
    $maleCount = 0;
    $femaleCount = 0;

    // Loop through each search log and fetch related certificates
    foreach ($searchLogs as $log) {
        $certificate = Certificate::where('certificate_number', $log->search_term)
            ->with('institution')
            ->first();
        
        if ($certificate) {
            $certificates->push($certificate);

            // Count male and female certificates
            if ($certificate->gender === 'Male') {
                $maleCount++;
            } elseif ($certificate->gender === 'Female') {
                $femaleCount++;
            }
        }
    }

    // Pass the certificates and gender counts to the view
    return view('Users.UserDashboardVerified', [
        'certificates' => $certificates,
        'maleCount' => $maleCount,
        'femaleCount' => $femaleCount,
        'searchCount'=>$searchCount,
    ]);
}



public function SkillSearch()
{
    $packages = Package::all();

    return view('Users.UserDashboardSkillSearch', [ 'packages'=> $packages,]);
}


// public function search(Request $request)
// {
//     $this->validate($request, [
//         'institution_id' => 'required|exists:institutions,id',
//         'certificate_number' => 'required|string',
//     ]);

//     $institutionId = $request->input('institution_id');
//     $certificateNumber = $request->input('certificate_number');

//      // Log the search
//      SearchLog::create([
//         'user_id' => auth()->id(),
//         'search_term' => $certificateNumber,
//     ]);

//     $certificate = Certificate::where('institution_id', $institutionId)
//         ->where('certificate_number', $certificateNumber)
//         ->with('institution') // Assuming 'student' is the relationship name in the Certificate model
//         ->first();

//     if ($certificate) {
//         return redirect()->route('user.dashboard')->with('certificate', $certificate);
//     }

//     return redirect()->route('user.dashboard')->with('error', 'No matching record found.');
// }


public function search(Request $request)
{
    $this->validate($request, [
        'institution_id' => 'required|exists:institutions,id',
        'certificate_number' => 'required|string',
    ]);

    $userId = auth()->id();
    $user = User::find($userId); 
    $activePackage = $user->activePackage();

    if (!$activePackage) {
        return redirect()->route('user.dashboard')
            ->with('status', 'You do not have an active package.')
            ->with('error_type', 'package');
    }

    if ($activePackage->searches_left <= 0) {
        return redirect()->route('user.dashboard')
            ->with('error', 'You have exhausted your search limit.')
            ->with('error_type', 'package');
    }

    $institutionId = $request->input('institution_id');
    $certificateNumber = $request->input('certificate_number');

    $certificate = Certificate::where('institution_id', $institutionId)
        ->where('certificate_number', $certificateNumber)
        ->with('institution')
        ->first();

    if ($certificate) {

        // Decrement the search count only if a certificate is found
        $activePackage->decrement('searches_left');

        // Log the search
        SearchLog::create([
            'user_id' => $userId,
            'user_package_id' => $activePackage->id,
            'search_term' => $certificateNumber,
        ]);

        return redirect()->route('user.dashboard')->with('certificate', $certificate);
    }

    return redirect()->route('user.dashboard')
        ->with('certificate_error', 'No matching record found.')
        ->with('error_type', 'search');
}

// public function displaySearchCount()
//     {
//         $userId = auth()->id();
//         $userPackage = UserPackage::where('user_id', $userId)->where('payment_status', 'paid')->first();

//         if ($userPackage) {
//             $totalSearchesAllowed = $userPackage->getTotalSearchesAllowed();
//             $searchesLeft = $userPackage->searches_left;
//             $searchesDone = $totalSearchesAllowed - $searchesLeft;

//             return view('user.dashboard', compact('searchesDone', 'searchesLeft', 'totalSearchesAllowed'));
//         } else {
//             return redirect()->route('user.dashboard')->with('error', 'You do not have an active package.');
//         }
//     }

 
public function institutionVerifiedCerticate()
{
    $user = auth()->user();
    $institution = $user->my_institution;
    $institutionCertificates = collect();
    $maleCount = 0;
    $femaleCount = 0;

    if ($institution) {
        // Get all certificate numbers associated with this institution
        $certificateNumbers = Certificate::where('institution_id', $institution->id)
            ->pluck('certificate_number')
            ->toArray();

        // Fetch search logs that match the certificate numbers
        $institutionCertificates = SearchLog::whereIn('search_term', $certificateNumbers)
            ->whereHas('certificate', function($query) use ($institution) {
                $query->where('institution_id', $institution->id);
            })
            ->with('certificate')
            ->get();


             // Count males and females
        foreach ($institutionCertificates as $log) {
            if ($log->certificate && $log->certificate->gender) {
                if ($log->certificate->gender === 'male') {
                    $maleCount++;
                } elseif ($log->certificate->gender === 'female') {
                    $femaleCount++;
                }
            }
        }
    }





return view('Users.UserDashboardinstitutionVerifiedCerticate',
 [ 'institutionCertificates' => $institutionCertificates

]);



}

public function talktoUs()
{
    $packages = Package::all();

    return view('Users.UserDashboardTalktoUs', [ 'packages'=> $packages,]);
}


public function Payment()
{
    $packages = Package::all();

    return view('Users.UserDashboardTalktoUs', [ 'packages'=> $packages,]);
}



}



public function search(Request $request)
{
    $this->validate($request, [
        'institution_id' => 'required|exists:institutions,id',
        'certificate_number' => 'required|string',
    ]);

    $userId = auth()->id();
    $user = User::find($userId);
    $activePackage = $user->activePackage();

    if (!$activePackage) {
        return redirect()->route('user.dashboard')
            ->with('status', 'You do not have an active package.')
            ->with('error_type', 'package');
    }

    if ($activePackage->searches_left <= 0) {
        return redirect()->route('user.dashboard')
            ->with('error', 'You have exhausted your search limit.')
            ->with('error_type', 'package');
    }

    $institutionId = $request->input('institution_id');
    $certificateNumber = $request->input('certificate_number');

    $certificate = Certificate::where('institution_id', $institutionId)
        ->where('certificate_number', $certificateNumber)
        ->with('institution')
        ->first();

    if ($certificate) {
        // Decrement the search count only if a certificate is found
        $activePackage->decrement('searches_left');

        
        // Calculate the amount for each search and update the institution's balance
        $pricePerSearch = $activePackage->amount / $activePackage->getTotalSearchesAllowed();
        $amountToGiveToInstitution = $pricePerSearch * 0.5;

        // Save the amount given to the institution for this search
        $userPackageInstitution = new UserPackageInstitution();
        $userPackageInstitution->user_package_id = $activePackage->id;
        $userPackageInstitution->institution_id = $institutionId;
        $userPackageInstitution->amount_given_to_institution = $amountToGiveToInstitution;
        $userPackageInstitution->save();

        // Log the search
        SearchLog::create([
            'user_id' => $userId,
            'user_package_id' => $activePackage->id,
            'search_term' => $certificateNumber,
        ]);

        return redirect()->route('user.dashboard')->with('certificate', $certificate);
    }

    return redirect()->route('user.dashboard')
        ->with('certificate_error', 'No matching record found.')
        ->with('error_type', 'search');
}